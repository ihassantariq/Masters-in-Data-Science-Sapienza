chain[t+1]<-sample(states,size=1,prob=mcs[chain[t],])
}
plot(chain,ylim=c(0,4), col=c("red", "green", "blue", "orange") )
table(chain)
MC_simu_3<-table(chain)/nsamp
MC_simu_3
barplot(MC_simu_3, main="relative frequencies of MC simulation 3",
names.arg=c("state 1", "state 2", "state 3"),col=c("red", "blue","green"))
counts=rbind(MC_simu_1, MC_simu_3)
barplot(counts, main="comparison between MC simulations at different starting point X_0",
col=c("brown","green"), names.arg=c("state 1", "state 2", "state 3"),
legend = c("MC simulation 1 - X_0=1","MC simulation 3 - X_0=2"),
beside=TRUE, ylim=c(0,0.5), args.legend=c(bty="n"))
setwd("~/Documents/Google Drive - University /Master in Data Science/SDS - 2 - From Scratch/SDS - Homework -1")
load("2021_homework_01.RData")
load("2021_homework_01.RData") # Loading the rdata file
mydata <- subset(roma,subset=sign_up_number==104)
str(mydata)
head(mydata)
par(oma=c(3,1,3,3))
plot(prop.table(table(mydata$car_accidents)),
main="Emperical distribution of number of car accidents",
xlab="# car accidents",ylab="relative frequency",ylim=c(0,0.5))
par(oma=c(3,1,3,3))
plot(prop.table(table(mydata$car_accidents)),
main="Emperical distribution of number of car accidents",
xlab="# car accidents",ylab="relative frequency",ylim=c(0,0.5))
mtext(side=3,outer = TRUE,text=" ")
mtext(side=1,outer = TRUE,text=" ")
par(oma=c(3,1,3,3))
plot(prop.table(table(mydata$car_accidents)),
main="Emperical distribution of number of car accidents",
xlab="# car accidents",ylab="relative frequency",ylim=c(0,0.5))
par(oma=c(3,1,3,3))
plot(prop.table(table(mydata$car_accidents)),
main="Emperical distribution of number of car accidents",
xlab="# car accidents",ylab="relative frequency",ylim=c(0,0.9))
print ("Mean of car accidents are: ", mean(mydata$car_accidents))
mean(mydata$car_accidents)
print ("Mean of car accidents are: "+ mean(mydata$car_accidents))
paste(c("Mean of car accidents are: ", mean(mydata$car_accidents)))
?paste
paste(c("Mean of car accidents are:", mean(mydata$car_accidents), sep=":"))
paste(c("Mean of car accidents are:", mean(mydata$car_accidents), sep=":"))
paste(c("Mean of car accidents are:", mean(mydata$car_accidents)))
print (paste(c("Mean of car accidents are:", mean(mydata$car_accidents))))
print (paste(c("Mean of car accidents are:", mean(mydata$car_accidents))))
print ("Mean of car accidents are:", mean(mydata$car_accidents))
print ("Mean of car accidents are:")
mean(mydata$car_accidents)
print ("Mean of car accidents are:")
print( mean(mydata$car_accidents))
print ("Mean of car accidents are:")
print( mean(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
print()
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
print(cat ("Mean of car accidents are:",  mean(mydata$car_accidents)))
print(cat ("Mean of car accidents are:",  mean(mydata$car_accidents)))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
cat ("Median of car accidents are:",  median(mydata$car_accidents))
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents))
cat ("Variance of car accidents are:",  var(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
print("")
cat ("Median of car accidents are:",  median(mydata$car_accidents))
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents))
cat ("Variance of car accidents are:",  var(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
print()
print(cat ("Mean of car accidents are:",  mean(mydata$car_accidents)))
cat ("Median of car accidents are:",  median(mydata$car_accidents))
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents))
cat ("Variance of car accidents are:",  var(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents))
cat ("Median of car accidents are:",  median(mydata$car_accidents))
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents))
cat ("Variance of car accidents are:",  var(mydata$car_accidents))
?cat
cat ("Mean of car accidents are:",  mean(mydata$car_accidents), fill = TRUE)
cat ("Median of car accidents are:",  median(mydata$car_accidents), fill = TRUE)
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents), fill = TRUE)
cat ("Variance of car accidents are:",  var(mydata$car_accidents))
cat ("Mean of car accidents are:",  mean(mydata$car_accidents), fill = TRUE)
cat ("Median of car accidents are:",  median(mydata$car_accidents), fill = TRUE)
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents), fill = TRUE)
cat ("Variance of car accidents are:",  var(mydata$car_accidents), fill = TRUE)
length(mydata$car_accidents)
?median
cat ("Mean of car accidents are:",  mean(mydata$car_accidents), fill = TRUE)
cat ("Median of car accidents are:",  median(mydata$car_accidents, na.rm = TRUE), fill = TRUE)
cat ("Standard deviation of car accidents are:",  sd(mydata$car_accidents), fill = TRUE)
cat ("Variance of car accidents are:",  var(mydata$car_accidents), fill = TRUE)
prior_prob_0_15 <- function(myshape){
pgamma(15,shape=myshape,rate=myshape/3.22)
}
curve(prior_prob_0_15,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=0.29,col="blue",lwd=3,lty=3)
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=0.29,col="blue",lwd=3,lty=3)
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=40)
abline(h=0.95,col="red",lwd=3)
abline(v=0.29,col="blue",lwd=3,lty=3)
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=1000)
abline(h=0.95,col="red",lwd=3)
abline(v=0.29,col="blue",lwd=3,lty=3)
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=0.29,col="blue",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=shape_to_consider,col="blue",lwd=3,lty=3)
shape_to_consider = 0.30 #testing the shape
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=shape_to_consider,col="blue",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape
prior_prob <- function(shape){
pgamma(16,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=shape_to_consider,col="blue",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="red",lwd=3)
abline(v=shape_to_consider,col="blue",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape best we have got
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="yellow",lwd=3)
abline(v=shape_to_consider,col="blue",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape best we have got
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="yellow",lwd=3)
abline(v=shape_to_consider,col="green",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape best we have got
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="blue",lwd=3)
abline(v=shape_to_consider,col="green",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape best we have got
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=30000)
abline(h=0.95,col="blue",lwd=3)
abline(v=shape_to_consider,col="red",lwd=3,lty=3)
shape_to_consider = 0.29 #testing the shape best we have got
prior_prob <- function(shape){
pgamma(15,shape=shape,rate=shape/3.22)
}
curve(prior_prob,from=0.01,to=5,n=40000)
abline(h=0.95,col="blue",lwd=3)
abline(v=shape_to_consider,col="red",lwd=3,lty=3)
curve(dgamma(x,shape=0.29,rate=0.29/3.22))
sum(mydata$car_accidents)
sum(mydata$car_accidents)
# posterior median
shape_prior <- 0.29
rate_prior <- 0.09
shape_post <- 74.29
rate_post <- 19.09
qgamma(0.5,shape=shape_post,rate=rate_post)
library(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
# ?hpd
HPD_interval_095 <- hpd(qgamma, shape=shape_post, rate=rate_post, conf=0.95)
HPD_interval_095
# equal tail
equal_tail_095 <- c(lower=qgamma(0.025, shape=shape_post, rate=rate_post), upper=qgamma(0.975, shape=shape_post, rate=rate_post))
equal_tail_095
curve(dgamma(x,shape=shape_post, rate=rate_post),from=0,to=15,n=3000,lwd=3,col="blue",ylab="density",main="Prior-posterior updating",cex.main=0.75, xlab=expression(theta))
curve(dgamma(x,shape=shape_prior, rate=rate_prior),add=TRUE,lwd=3)
set.seed(123)
theta_prior_sim <- rgamma(10000, shape = 3.007117, rate = 1002.372)
psi_prior_sim <- 1/theta_prior_sim
sd(psi_prior_sim)
set.seed(123)
theta_prior_sim <- rgamma(100000, shape = 3.007117, rate = 1002.372)
psi_prior_sim <- 1/theta_prior_sim
sd(psi_prior_sim)
set.seed(123)
theta_prior_sim <- rgamma(10000, shape = 3.007117, rate = 1002.372)
psi_prior_sim <- 1/theta_prior_sim
sd(psi_prior_sim)
set.seed(123)
theta_prior_sim <- rgamma(1000, shape = 3.007117, rate = 1002.372)
psi_prior_sim <- 1/theta_prior_sim
sd(psi_prior_sim)
set.seed(123)
theta_prior_sim <- rgamma(10000, shape = 3.007117, rate = 1002.372)
psi_prior_sim <- 1/theta_prior_sim
sd(psi_prior_sim)
TeachingDemos::emp.hpd(psi_prior_sim)
hist(psi_prior_sim, prob=TRUE, xlim=c(0,2500), n=200, xlab=expression(psi),main="")
title(main="Empirical distribution from i.i.d. simulation
form the prior on the average lifetime")
box()
hist(psi_prior_sim, prob=TRUE, xlim=c(0,2500), n=200, xlab=expression(psi),main="")
title(main="Empirical distribution from i.i.d. simulation
form the prior on the average lifetime")
hist(psi_prior_sim, prob=TRUE, xlim=c(0,2500), n=200, xlab=expression(psi),main="")
title(main="Empirical distribution from i.i.d. simulation
form the prior on the average lifetime")
box()
y_obs <- c(1, 13, 27, 43, 73, 75, 154, 196, 220, 297, 344,
610, 734, 783, 796, 845, 859, 992, 1066, 1471)
n <- length(y_obs)
n
sum(y_obs)
theta_posterior_sim <- rgamma(10000, shape = 23.007117, rate = 10601.37)
psi_posterior_sim <- 1/theta_posterior_sim
sd(psi_posterior_sim)
hist(psi_prior_sim, prob=TRUE, xlim=c(0,2500), n=200, xlab=expression(psi),main="")
title(main="Empirical distribution from i.i.d. simulation
form the posterior on the average lifetime")
mean(psi_posterior_sim)
hist(psi_prior_sim, prob=TRUE, xlim=c(0,2500), n=200, xlab=expression(psi),main="")
title(main="Empirical distribution from i.i.d. simulation
form the posterior on the average lifetime")
mean(psi_posterior_sim)
mean(psi_posterior_sim)
sd(psi_posterior_sim)
mean(psi_posterior_sim)
sd(psi_posterior_sim)
TeachingDemos::emp.hpd(psi_posterior_sim)
cat ("Mean is:", mean(psi_posterior_sim))
cat ("standard deviation is:", sd(psi_posterior_sim))
cat ("HPD is:", TeachingDemos::emp.hpd(psi_posterior_sim))
?cat
cat ("Mean is:", mean(psi_posterior_sim) , fill=FALSE)
cat ("standard deviation is:", sd(psi_posterior_sim))
cat ("HPD is:", TeachingDemos::emp.hpd(psi_posterior_sim))
cat ("Mean is:", mean(psi_posterior_sim) , fill=TRUE)
cat ("standard deviation is:", sd(psi_posterior_sim))
cat ("HPD is:", TeachingDemos::emp.hpd(psi_posterior_sim))
cat ("Mean is:", mean(psi_posterior_sim) , fill=TRUE)
cat ("standard deviation is:", sd(psi_posterior_sim),  , fill=TRUE)
cat ("Mean is:", mean(psi_posterior_sim) , fill=TRUE)
cat ("standard deviation is:", sd(psi_posterior_sim),   fill=TRUE)
cat ("HPD is:", TeachingDemos::emp.hpd(psi_posterior_sim), fill=TRUE)
cat ("Mean is:", mean(psi_posterior_sim) , fill=TRUE)
cat ("Standard deviation is:", sd(psi_posterior_sim),   fill=TRUE)
cat ("HPD is:", TeachingDemos::emp.hpd(psi_posterior_sim), fill=TRUE)
curve(invgamma::dinvgamma(x,shape=23.007117,rate=10601.37),
main="",xlab=expression(psi),
ylab="prior or posterior density",
from=0,to=2500,n=2000,lwd=3,col="blue")
curve(invgamma::dinvgamma(x,shape=3.007117,rate=1002.372),
main="",xlab=expression(psi),
n=2000,lwd=3,col="red",add=TRUE)
title("prior-to-posterior comparison")
legend(x="topright",col=c("red","blue"),lty=1,lwd=3,
legend=c("prior","posterior"))
pgamma(1/550, shape = 23.007117, rate = 10601.37)
mean(theta_posterior_sim<(1/550))
mean(psi_posterior_sim>550)
curve(invgamma::dinvgamma(x,shape=23.007117,rate=10601.37),
main="",xlab=expression(psi),
ylab="prior or posterior density",
from=0,to=2500,n=2000,lwd=3,col="blue")
curve(invgamma::dinvgamma(x,shape=3.007117,rate=1002.372),
main="",xlab=expression(psi),
n=2000,lwd=3,add=TRUE)
title("prior-to-posterior comparison")
legend(x="topright",col=c("red","blue"),lty=1,lwd=3,
legend=c("prior","posterior"))
curve(invgamma::dinvgamma(x,shape=23.007117,rate=10601.37),
main="",xlab=expression(psi),
ylab="prior or posterior density",
from=0,to=2500,n=2000,lwd=3,col="red")
curve(invgamma::dinvgamma(x,shape=3.007117,rate=1002.372),
main="",xlab=expression(psi),
n=2000,lwd=3,add=TRUE)
title("prior-to-posterior comparison")
legend(x="topright",col=c("black","red"),lty=1,lwd=3,
legend=c("prior","posterior"))
exp(Inf)
exp(-Inf)
plot(dbeta(5,5))
plot(rbeta(5,5))
plot(dbeta(x,5,5))
x=c(1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1)
plot(dbeta(x,5,5))
dnorm(0,0.001)
dnorm(0,0.001)
dgamma(0.001,0.001)
knitr::opts_chunk$set(echo = TRUE, out.width='500px', dpi=200)#, fig.height = 4)
# here we have to initialize the model beta_4 value equal to zero as well.
mod2.inits <- function(){
list("tau" = 1, "beta" = c(0,0,0,0))
}
set.seed(1873829)
mod2.fit <- jags(data = dat.jags,                                        # DATA
model.file = model2.jags, inits = mod2.inits,                  # MODEL
parameters.to.save = mod.params,
n.chains = 3, n.iter = 9000, n.burnin = 1000, n.thin=10)# MCMC
knitr::opts_chunk$set(echo = TRUE, out.width='500px', dpi=200)#, fig.height = 4)
require(tidyverse)
require(magrittr)
require(R2jags)
require(mcmcse)
require(bayesplot)
require(TeachingDemos)
FEVdata <- read.table(file="fev.txt",header=T, sep="\t")
head(FEVdata)
FEVdata$gender = ifelse(FEVdata$gender=="m", 1, 0) # keep in mind we are replacing the original gender from character to 0 and 1s
plot(x=FEVdata$age,y=FEVdata$fev,xlab = "Age",ylab = "FEV", col= c("darkgreen"))
plot(x=FEVdata$height,y=FEVdata$fev,xlab = "Height",ylab = "FEV", col= c("darkblue"))
plot(x=FEVdata$gender,y=FEVdata$fev,xlab = "Female - Male",ylab = "FEV", col= c("darkgreen"))
plot(x=FEVdata$smoking,y=FEVdata$fev,xlab = " Non-Smoking - Smoking",ylab = "FEV", col= c("darkblue"))
si = 0
ni = 0
smokers = 0
non_smokers = 0
n = length(FEVdata$smoking)
for(i in 1:n) {
if(FEVdata$smoking[i] == 1)
{
smokers[si] = FEVdata$fev[i]
si = si + 1
}
else
{
non_smokers[ni] = FEVdata$fev[i]
ni = ni + 1
}
}
mean_of_smoker = mean( smokers)
mean_of_nonsmoker = mean(non_smokers)
cat("Mean of Smoker:",mean_of_smoker,fill = TRUE)
cat("Mean of non-Smoker:", mean_of_nonsmoker)
hist(FEVdata$fev,breaks = 50,xlab = "FEV Distribution")
model1.jags <- function() {
# Likelihood
for(i in 1:n){
fev[i] ~ dnorm(mu[i],tau)
mu[i] <- beta[1] + beta[2]*age[i] + beta[3]*smoke[i]
}
beta[1] ~ dnorm(0,0.001)  # Diffuse prior
beta[2] ~ dnorm(0,0.001)
beta[3] ~ dnorm(0,0.001)
tau ~ dgamma(0.001,0.001) #gamma here is important
}
# Preparing data for JAGS
n <- length(FEVdata$age)
fev <- FEVdata$fev
smoke <- FEVdata$smoking
age <- FEVdata$age
#Lets only include Age and Smoke features and analyze them
dat.jags <- list("n","fev","smoke", "age")
# Defining parameters of interest
mod.params <- c("beta","tau")
# Starting values
mod.inits <- function(){
list("tau" = 1, "beta" = c(0,0,0))
}
# Run JAGS
set.seed(1873829) # adding my matricula
mod1.fit <- jags(data = dat.jags,                                        # DATA
model.file = model1.jags, inits = mod.inits,                  # MODEL
parameters.to.save = mod.params,
n.chains = 3, n.iter = 9000, n.burnin = 1000, n.thin=10)# MCMC
mod1.fit
chainArray <- mod1.fit$BUGSoutput$sims.array
chainMat <- mod1.fit$BUGSoutput$sims.matrix
# Intervals
cred <- 0.95
cat("Here are pont estimates or means of different parameters:", fill = TRUE)
# Point estimates
(par.hat.jags <- colMeans(chainMat))
cat("", fill = TRUE)
cat("Here are equal tail intervals of our parameters we estimated:", fill = TRUE)
# Intervals
(par.ET.jags <- apply(chainMat, 2, quantile,
prob=c((1-cred)/2, 1-(1-cred)/2)))
cat("", fill = TRUE)
cat("Here are HPD intervals using coda of our model:", fill = TRUE)
# What about the HPD?
(par.HPD.jags <- coda::HPDinterval(as.mcmc(chainMat)))
chainArray
paramters = as.matrix(mod1.fit)
paramters
head(paramters)
mod1.fit$BUGSoutput$sims.matrix
# Preparing data for JAGS
n <- length(FEVdata$age)
fev <- FEVdata$fev
smoke <- FEVdata$smoking
age <- FEVdata$age
#Lets only include Age and Smoke features and analyze them
dat.jags <- list("n","fev","smoke", "age")
# Defining parameters of interest
mod.params <- c("beta","tau")
# Starting values
mod.inits <- function(){
list("tau" = 1, "beta" = c(0,0,0))
}
# Run JAGS
set.seed(1873829) # adding my matricula
mod1.fit <- jags(data = dat.jags,                                        # DATA
model.file = model1.jags, inits = mod.inits,                  # MODEL
parameters.to.save = mod.params,
n.chains = 3, n.iter = 9000, n.burnin = 1000, n.thin=10)# MCMC
mod1.fit
chainArray <- mod1.fit$BUGSoutput$sims.array
paramters = as.matrix(mod1.fit)
chainMat <- mod1.fit$BUGSoutput$sims.matrix
# Intervals
cred <- 0.95
cat("Here are pont estimates or means of different parameters:", fill = TRUE)
# Point estimates
(par.hat.jags <- colMeans(chainMat))
cat("", fill = TRUE)
cat("Here are equal tail intervals of our parameters we estimated:", fill = TRUE)
# Intervals
(par.ET.jags <- apply(chainMat, 2, quantile,
prob=c((1-cred)/2, 1-(1-cred)/2)))
cat("", fill = TRUE)
cat("Here are HPD intervals using coda of our model:", fill = TRUE)
# What about the HPD?
(par.HPD.jags <- coda::HPDinterval(as.mcmc(chainMat)))
# Plots with BayesPlot
chainArray <- mod1.fit$BUGSoutput$sims.array
bayesplot::mcmc_combo(chainArray) # combo of density plot
bayesplot::mcmc_acf(chainArray)
coda.fit <- coda::as.mcmc(mod1.fit)
coda::geweke.diag(coda.fit) #
coda::geweke.plot(coda.fit)
coda::gelman.diag(coda.fit)
coda::gelman.plot(coda.fit)
coda::heidel.diag(coda.fit)
model2.jags <- function() {
# Likelihood
for(i in 1:n){
fev[i] ~ dnorm(mu[i],tau)
mu[i] <- beta[1] + beta[2]*age[i] + beta[3]*smoke[i] + beta[4]*age[i]*smoke[i]
}
beta[1] ~ dnorm(0,0.001)  # Diffuse prior
beta[2] ~ dnorm(0,0.001)
beta[3] ~ dnorm(0,0.001)
beta[4] ~ dnorm(0,0.001)
tau ~ dgamma(0.001,0.001)
}
# here we have to initialize the model beta_4 value equal to zero as well.
mod2.inits <- function(){
list("tau" = 1, "beta" = c(0,0,0,0))
}
set.seed(1873829)
mod2.fit <- jags(data = dat.jags,                                        # DATA
model.file = model2.jags, inits = mod2.inits,                  # MODEL
parameters.to.save = mod.params,
n.chains = 3, n.iter = 9000, n.burnin = 1000, n.thin=10)# MCMC
mod2.fit
chainArray <- mod2.fit$BUGSoutput$sims.array
chainArray <- mod2.fit$BUGSoutput$sims.array
chainArray
length(chainArray)
chainMat <- mod2.fit$BUGSoutput$sims.matrix
chainMat
beta
smoke<-FEVdata$smoking
fev<- FEVdata$fev
age<- FEVdata$age
n <- length(fev)
lr <- lm(fev~age+smoke+age:smoke) # linear regression
# should display summary of the model
summary(lr)
beta <- coef(lr)
X <- cbind(rep(1,n),age,smoke,age*smoke)
# building getting data from model itself
rstudsmoke <- rstudent(lr)[smoke==1]
rstudnonsmoke <- rstudent(lr)[smoke==0]
beta
X
Tail(X)
tail(X)
