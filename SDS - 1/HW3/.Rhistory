xlab="",
border="blue",
plot = TRUE,
freq=FALSE,
col="green")
xfit<-seq(min(data_set),max(data_set),length=40)
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue", lwd=2)
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set =as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
freq=FALSE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue", lwd=2)
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set =as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue", lwd=2)
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set =as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set =as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
freq = FALSE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
d <- density(data_set)
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
freq = FALSE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
data_set <- density(data_set)
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
freq = FALSE,
col="green")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
freq = FALSE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="blue",
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
d <- density(data_set) # returns the density data
plot(d) # plots the results
d <- density(data_set,) # returns the density data
plot(d) # plots the results
polygon(d, col="red", border="blue")
d <- density(data_set) # returns the density data
plot(d) # plots the results
polygon(d, col="red", border="blue")
d <- density(data_set, main="Density of Stellar Masses") # returns the density data
plot(d) # plots the results
polygon(d, col="red", border="blue")
d <- density(data_set) # returns the density data
plot(d) # plots the results
polygon(d, col="red", border="blue")
d <- density(data_set) # returns the density data
plot(d,, main="Density of Stellar Masses") # plots the results
polygon(d, col="red", border="blue")
data_set
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = as.numeric(data_set[-1,])
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
freq = TRUE,
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
freq = TRUE,
plot = TRUE,
col="green")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
step <- .1
pad <- step - ((max(x) - min(x)) %% step)/2
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
x = data_set
step <- .1
pad <- step - ((max(x) - min(x)) %% step)/2
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
is.factor(data_set)
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
data_set = as.numeric(as.character(data_set))
data_set
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
data_set = as.numeric(as.character(data_set))
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
freq = TRUE,
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
data_set = as.numeric(as.character(data_set))
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
data_set = as.numeric(as.character(data_set))
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
freq = FALSE,
plot = TRUE,
col="green")
xfit<-seq(min(data_set),max(data_set))
yfit<-dnorm(xfit,mean=mean(data_set),sd=sd(data_set))
yfit <- yfit*diff(h$mids[1:2])*length(data_set)
lines(xfit, yfit, col="blue")
data_set = read.csv("NGC6611.csv",header = FALSE)
data_set = data_set[-1,]
data_set = as.numeric(as.character(data_set))
h <-hist(data_set,
main="Histogram for Stellar Mass",
xlab="",
border="black",
freq = FALSE,
plot = TRUE,
col="green")
d <- density(data_set) # returns the density data
plot(d,, main="Density of Stellar Masses") # plots the results
polygon(d, col="red", border="blue")
d <- density(data_set) # returns the density data
plot(d, main="Density of Stellar Masses") # plots the results
polygon(d, col="red", border="blue")
Summary(data_set)
?summary
summary(data_set)
sapply(data_set)
require(rjags)
require(psych)
install.packages("psych")
require(rjags)
require(psych)
require(rjags)
require(psych)
require(rjags)
require(psych)
describe(data_set)
print(describe(data_set))
as.data.frame(describe(data_set))
as.data.frame(describe(data_set))
as.data.frame(describe(data_set))
data_list= list(
L = 208,
a = 0,
b = 0.0001,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
# The model specification
model_string <- "model{
for( i in 1 : L ) {
y[i] ~ dlnorm(mu, tau)
}
mu ~ dnorm(a, b)
sigma ~ dgamma(beta, alpha)
tau <- pow(sigma,  -2)
}"
# Running the model
model <- jags.model(textConnection(model_string), data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
summary(mcmc_samples)
describe(mcmc_samples)
summary(mcmc_samples)
class(mcmc_samples)
data_list= list(
L = 208,
a = 0,
b = 0.0001,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
data_init = list(list(
mu = 0.5,
sigma=0.002
),
list(
mu=0.6,
sigma=0.001
),
list(
mu=0.4,
sigma=0.002
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
data_list= list(
L = 208,
a = 0.5,
b = 1.5,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.5,
sigma=0.002
),
list(
mu=0.6,
sigma=0.001
),
list(
mu=0.4,
sigma=0.002
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma","y"), n.iter=5000)
plot(mcmc_samples)
data_list= list(
L = 208,
a = 0,
b = 0,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.5,
sigma=0.002
),
list(
mu=0.6,
sigma=0.001
),
list(
mu=0.4,
sigma=0.002
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
data_list= list(
L = 208,
a = 0,
b = 0.000001,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.5,
sigma=0.002
),
list(
mu=0.6,
sigma=0.001
),
list(
mu=0.4,
sigma=0.002
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
# The model specification
model_string <- "model{
for( i in 1 : L ) {
y[i] ~ dlnorm(mu, tau)
}
mu ~ dlnorm(a, b)
sigma ~ dgamma(beta, alpha)
tau <- pow(sigma,  -2)
}"
data_list= list(
L = 208,
a = 0,
b = 0.000001,
alpha = 1, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.00625,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.5,
sigma=0.002
),
list(
mu=0.6,
sigma=0.001
),
list(
mu=0.4,
sigma=0.002
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
# The model specification
model_string <- "model{
for( i in 1 : L ) {
y[i] ~ dlnorm(mu, tau)
}
mu ~ dnorm(a, b)
sigma ~ dgamma(beta, alpha)
tau <- pow(sigma,  -2)
}"
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
data_list= list(
L = 208,
a = 1,
b = 0.00004,
alpha = 0, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.0064,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.2,
sigma=0.001
),
list(
mu=0.3,
sigma=0.002
),
list(
mu=0.7,
sigma=0.003
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
data_list= list(
L = 208,
a = 0.0001,
b = 0.00004,
alpha = 0, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.0064,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.2,
sigma=0.001
),
list(
mu=0.3,
sigma=0.002
),
list(
mu=0.7,
sigma=0.003
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
data_list= list(
L = 208,
a = 1,
b = 0.00004,
alpha = 0.4, # it is written somewhere that it is good value for bell shapped distribution
beta = 0.0064,
y = data_set
)
#giving three different initial values for three different chains
data_init = list(list(
mu = 0.2,
sigma=0.001
),
list(
mu=0.3,
sigma=0.002
),
list(
mu=0.7,
sigma=0.003
))
# Running the model
model <- jags.model(textConnection(model_string), inits = data_init,data = data_list, n.chains = 3, n.adapt= 5000)
update(model, 5000); # Burnin for 5000 samples
mcmc_samples <- coda.samples(model, variable.names=c("mu", "sigma"), n.iter=5000)
plot(mcmc_samples)
summary(mcmc_samples)
